
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.l2ashdz.layeredimager.analizador.sintactico;

import com.l2ashdz.layeredimager.edd.sparsematrix.SparseMatrix;
import com.l2ashdz.layeredimager.edd.tree.ArbolAVL;
import com.l2ashdz.layeredimager.model.Capa;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CapParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CapSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CapParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CapParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CapParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\004\005\000\002\004\004" +
    "\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\004\011\005\001\002\000\004\005\022\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\004\011\013\001\002\000" +
    "\004\005\ufffe\001\002\000\004\007\020\001\002\000\004" +
    "\006\014\001\002\000\004\011\015\001\002\000\004\006" +
    "\016\001\002\000\004\010\017\001\002\000\004\007\ufffb" +
    "\001\002\000\006\005\ufffc\011\013\001\002\000\004\005" +
    "\ufffd\001\002\000\006\002\uffff\011\005\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\010\005\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\020\005\011\001\001\000\002\001\001\000\006\002\022" +
    "\003\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CapParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CapParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CapParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    SparseMatrix matriz = new SparseMatrix();
    ArbolAVL capas = new ArbolAVL();

    public ArbolAVL getCapas() {
        return this.capas;
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss + " - " + descripcion);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CapParser$actions {
  private final CapParser parser;

  /** Constructor */
  CUP$CapParser$actions(CapParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CapParser$do_action_part00000000(
    int                        CUP$CapParser$act_num,
    java_cup.runtime.lr_parser CUP$CapParser$parser,
    java.util.Stack            CUP$CapParser$stack,
    int                        CUP$CapParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CapParser$result;

      /* select the action based on the action number */
      switch (CUP$CapParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // capas ::= capa CLOSE_BRACE capas 
            {
              Object RESULT =null;

              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("capas",0, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= capas EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)).value;
		RESULT = start_val;
              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CapParser$parser.done_parsing();
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // capas ::= capa CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("capas",0, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // capa ::= ENTERO OPEN_BRACE nodos 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).value;
		
            capas.add(new Capa(matriz, Integer.parseInt(id)));
            matriz = new SparseMatrix();
        
              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("capa",1, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nodos ::= infoNodo SEMI nodos 
            {
              Object RESULT =null;

              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("nodos",2, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nodos ::= infoNodo SEMI 
            {
              Object RESULT =null;

              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("nodos",2, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-1)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // infoNodo ::= ENTERO COMMA ENTERO COMMA COLOR 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$CapParser$stack.elementAt(CUP$CapParser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$CapParser$stack.elementAt(CUP$CapParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$CapParser$stack.peek()).value;
		
                String color = c.replace("#", "");
                matriz.add(Integer.parseInt(color, 16), Integer.parseInt(x), Integer.parseInt(y));
           
              CUP$CapParser$result = parser.getSymbolFactory().newSymbol("infoNodo",3, ((java_cup.runtime.Symbol)CUP$CapParser$stack.elementAt(CUP$CapParser$top-4)), ((java_cup.runtime.Symbol)CUP$CapParser$stack.peek()), RESULT);
            }
          return CUP$CapParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CapParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CapParser$do_action(
    int                        CUP$CapParser$act_num,
    java_cup.runtime.lr_parser CUP$CapParser$parser,
    java.util.Stack            CUP$CapParser$stack,
    int                        CUP$CapParser$top)
    throws java.lang.Exception
    {
              return CUP$CapParser$do_action_part00000000(
                               CUP$CapParser$act_num,
                               CUP$CapParser$parser,
                               CUP$CapParser$stack,
                               CUP$CapParser$top);
    }
}

}
