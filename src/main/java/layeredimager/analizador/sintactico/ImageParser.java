
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package layeredimager.analizador.sintactico;

import layeredimager.model.image.PreImagen;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ImageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ImageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ImageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ImageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ImageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\007\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\004\005\000\002\004\003" +
    "\000\002\004\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\004\007\006\001\002\000\004\002\016\001" +
    "\002\000\004\005\014\001\002\000\004\004\007\001\002" +
    "\000\006\005\ufffb\007\011\001\002\000\004\005\ufffe\001" +
    "\002\000\006\005\ufffc\006\012\001\002\000\006\005\ufffb" +
    "\007\011\001\002\000\004\005\ufffd\001\002\000\006\002" +
    "\uffff\007\006\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\014\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\006\002\014\003\004" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ImageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ImageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ImageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    List<PreImagen> preImagenes = new ArrayList();
    List<Integer> capasImage = new ArrayList();

    public List<PreImagen> getPreImagenes() {
        return this.preImagenes;
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss + " - " + descripcion);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ImageParser$actions {
  private final ImageParser parser;

  /** Constructor */
  CUP$ImageParser$actions(ImageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ImageParser$do_action_part00000000(
    int                        CUP$ImageParser$act_num,
    java_cup.runtime.lr_parser CUP$ImageParser$parser,
    java.util.Stack            CUP$ImageParser$stack,
    int                        CUP$ImageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ImageParser$result;

      /* select the action based on the action number */
      switch (CUP$ImageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // images ::= image CLOSE_BRACE images 
            {
              Object RESULT =null;

              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("images",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= images EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)).value;
		RESULT = start_val;
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ImageParser$parser.done_parsing();
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // images ::= image CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("images",0, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-1)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // image ::= ENTERO OPEN_BRACE idCapas 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).value;
		preImagenes.add(new PreImagen(Integer.parseInt(id), capasImage));capasImage = new ArrayList();
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("image",1, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // idCapas ::= ENTERO COMMA idCapas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)).value;
		capasImage.add(Integer.parseInt(c));
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("idCapas",2, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.elementAt(CUP$ImageParser$top-2)), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // idCapas ::= ENTERO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ImageParser$stack.peek()).value;
		capasImage.add(Integer.parseInt(c));
              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("idCapas",2, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // idCapas ::= 
            {
              Object RESULT =null;

              CUP$ImageParser$result = parser.getSymbolFactory().newSymbol("idCapas",2, ((java_cup.runtime.Symbol)CUP$ImageParser$stack.peek()), RESULT);
            }
          return CUP$ImageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ImageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ImageParser$do_action(
    int                        CUP$ImageParser$act_num,
    java_cup.runtime.lr_parser CUP$ImageParser$parser,
    java.util.Stack            CUP$ImageParser$stack,
    int                        CUP$ImageParser$top)
    throws java.lang.Exception
    {
              return CUP$ImageParser$do_action_part00000000(
                               CUP$ImageParser$act_num,
                               CUP$ImageParser$parser,
                               CUP$ImageParser$stack,
                               CUP$ImageParser$top);
    }
}

}
